diff --git a/include/linux/skbuff.h b/include/linux/skbuff.h
index fbd0dc7..5cd5e9c 100644
--- a/include/linux/skbuff.h
+++ b/include/linux/skbuff.h
@@ -478,6 +478,8 @@ struct sk_buff {
 		__u32		dropcount;
 	};
 
+#define skb_tag			mark
+
 	__u16			vlan_tci;
 #ifndef __GENKSYMS__
 	__u16			rxhash;
diff --git a/net/core/skbuff.c b/net/core/skbuff.c
index 48593de..6a0153a 100644
--- a/net/core/skbuff.c
+++ b/net/core/skbuff.c
@@ -214,6 +214,7 @@ struct sk_buff *__alloc_skb(unsigned int size, gfp_t gfp_mask,
 	skb->transport_header = ~0U;
 #endif
 
+	if (!in_interrupt()) skb->skb_tag = nx_current_nid(); else skb->skb_tag = 0;
 	/* make sure we initialize shinfo sequentially */
 	shinfo = skb_shinfo(skb);
 	atomic_set(&shinfo->dataref, 1);
@@ -634,6 +635,7 @@ static void __copy_skb_header(struct sk_buff *new, const struct sk_buff *old)
 #endif
 #endif
 	new->vlan_tci		= old->vlan_tci;
+	new->skb_tag            = old->skb_tag;
 
 	skb_copy_secmark(new, old);
 
diff --git a/net/core/sock.c b/net/core/sock.c
index ed068e1..5b70afc 100644
--- a/net/core/sock.c
+++ b/net/core/sock.c
@@ -1176,6 +1176,8 @@ struct sock *sk_alloc(struct net *net, int family, gfp_t priority,
 		sk->sk_prot = sk->sk_prot_creator = prot;
 		sock_lock_init(sk);
 		sock_net_set(sk, get_net(net));
+		if (!in_interrupt())
+			sk->sk_mark = nx_current_nid();
 		atomic_set(&sk->sk_wmem_alloc, 1);
 
 		sock_update_classid(sk);
diff --git a/net/ipv4/af_inet.c b/net/ipv4/af_inet.c
index 6a8a6fd..4ba7f40 100644
--- a/net/ipv4/af_inet.c
+++ b/net/ipv4/af_inet.c
@@ -178,6 +178,8 @@ static int inet_autobind(struct sock *sk)
 			return -EAGAIN;
 		}
 		inet->sport = htons(inet->num);
+		sk->sk_xid = vx_current_xid();
+		if (!in_interrupt()) sk->sk_nid = nx_current_nid(); else sk->sk_nid=0;
 	}
 	release_sock(sk);
 	return 0;
diff --git a/net/ipv4/netfilter/ipt_LOG.c b/net/ipv4/netfilter/ipt_LOG.c
index 7d3992f..0964bb4 100644
--- a/net/ipv4/netfilter/ipt_LOG.c
+++ b/net/ipv4/netfilter/ipt_LOG.c
@@ -44,6 +44,8 @@ static void dump_packet(struct sbuff *m,
 	else
 		logflags = NF_LOG_MASK;
 
+	sb_add(m, "TAG=%d ", skb->skb_tag);
+
 	ih = skb_header_pointer(skb, iphoff, sizeof(_iph), &_iph);
 	if (ih == NULL) {
 		sb_add(m, "TRUNCATED");
