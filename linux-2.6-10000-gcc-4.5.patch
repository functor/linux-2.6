commit 124482935fb7fb9303c8a8ab930149c6a93d9910
Author: Andi Kleen <andi@firstfloor.org>
Date:   Fri Jun 18 23:09:00 2010 +0200

    x86: Fix vsyscall on gcc 4.5 with -Os

    This fixes the -Os breaks with gcc 4.5 bug.  rdtsc_barrier needs to be
    force inlined, otherwise user space will jump into kernel space and
    kill init.

    This also addresses http://gcc.gnu.org/bugzilla/show_bug.cgi?id=44129
    I believe.

    Signed-off-by: Andi Kleen <ak@linux.intel.com>
    LKML-Reference: <20100618210859.GA10913@basil.fritz.box>
    Signed-off-by: H. Peter Anvin <hpa@linux.intel.com>
    Cc: <stable@kernel.org>

commit 86c38a31aa7f2dd6e74a262710bf8ebf7455acc5
Author: Jeff Mahoney <jeffm@suse.com>
Date:   Wed Feb 24 13:59:23 2010 -0500

    tracing: Fix ftrace_event_call alignment for use with gcc 4.5

    GCC 4.5 introduces behavior that forces the alignment of structures to
    use the largest possible value. The default value is 32 bytes, so if
    some structures are defined with a 4-byte alignment and others aren't
    declared with an alignment constraint at all - it will align at 32-bytes.

    For things like the ftrace events, this results in a non-standard array.
    When initializing the ftrace subsystem, we traverse the _ftrace_events
    section and call the initialization callback for each event. When the
    structures are misaligned, we could be treating another part of the
    structure (or the zeroed out space between them) as a function pointer.

    This patch forces the alignment for all the ftrace_event_call structures
    to 4 bytes.

    Without this patch, the kernel fails to boot very early when built with
    gcc 4.5.

    It's trivial to check the alignment of the members of the array, so it
    might be worthwhile to add something to the build system to do that
    automatically. Unfortunately, that only covers this case. I've asked one
    of the gcc developers about adding a warning when this condition is seen.

   Signed-off-by: Jeff Mahoney <jeffm@suse.com>
    LKML-Reference: <4B85770B.6010901@suse.com>
    Signed-off-by: Steven Rostedt <rostedt@goodmis.org>
    Cc: stable@kernel.org

diff --git a/arch/x86/include/asm/system.h b/arch/x86/include/asm/system.h
index f08f973..e0fbf29 100644
--- a/arch/x86/include/asm/system.h
+++ b/arch/x86/include/asm/system.h
@@ -449,7 +449,7 @@ void stop_this_cpu(void *dummy);
  *
  * (Could use an alternative three way for this if there was one.)
  */
-static inline void rdtsc_barrier(void)
+static __always_inline void rdtsc_barrier(void)
 {
 	alternative(ASM_NOP3, "mfence", X86_FEATURE_MFENCE_RDTSC);
 	alternative(ASM_NOP3, "lfence", X86_FEATURE_LFENCE_RDTSC);
diff --git a/include/linux/syscalls.h b/include/linux/syscalls.h
index 71c9050..3e35002 100644
--- a/include/linux/syscalls.h
+++ b/include/linux/syscalls.h
@@ -154,7 +154,8 @@ static void prof_sysexit_disable_##sname(struct ftrace_event_call *unused)     \
 #define __SC_STR_TDECL6(t, a, ...)	#t, __SC_STR_TDECL5(__VA_ARGS__)
 
 #define SYSCALL_TRACE_ENTER_EVENT(sname)				\
-	static struct ftrace_event_call event_enter_##sname;		\
+	static struct ftrace_event_call					\
+	__attribute__((__aligned__(4))) event_enter_##sname;		\
 	struct trace_event enter_syscall_print_##sname = {		\
 		.trace                  = print_syscall_enter,		\
 	};								\
@@ -190,7 +191,8 @@ static void prof_sysexit_disable_##sname(struct ftrace_event_call *unused)     \
 	}
 
 #define SYSCALL_TRACE_EXIT_EVENT(sname)					\
-	static struct ftrace_event_call event_exit_##sname;		\
+	static struct ftrace_event_call					\
+	__attribute__((__aligned__(4))) event_exit_##sname;		\
 	struct trace_event exit_syscall_print_##sname = {		\
 		.trace                  = print_syscall_exit,		\
 	};								\
diff --git a/include/trace/ftrace.h b/include/trace/ftrace.h
index bc309b2..f14d954 100644
--- a/include/trace/ftrace.h
+++ b/include/trace/ftrace.h
@@ -65,7 +65,8 @@
 	};
 #undef DEFINE_EVENT
 #define DEFINE_EVENT(template, name, proto, args)	\
-	static struct ftrace_event_call event_##name
+	static struct ftrace_event_call			\
+	__attribute__((__aligned__(4))) event_##name
 
 #undef DEFINE_EVENT_PRINT
 #define DEFINE_EVENT_PRINT(template, name, proto, args, print)	\
diff --git a/kernel/trace/trace.h b/kernel/trace/trace.h
index 6167a38..1ad2d01 100644
--- a/kernel/trace/trace.h
+++ b/kernel/trace/trace.h
@@ -760,7 +760,8 @@ extern const char *__stop___trace_bprintk_fmt[];
 
 #undef FTRACE_ENTRY
 #define FTRACE_ENTRY(call, struct_name, id, tstruct, print)		\
-	extern struct ftrace_event_call event_##call;
+	extern struct ftrace_event_call					\
+	__attribute__((__aligned__(4))) event_##call;
 #undef FTRACE_ENTRY_DUP
 #define FTRACE_ENTRY_DUP(call, struct_name, id, tstruct, print)		\
 	FTRACE_ENTRY(call, struct_name, id, PARAMS(tstruct), PARAMS(print))
